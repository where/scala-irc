####################
# Akka Config File for the Where IRC app.

# This file has all the default settings, so all these could be removed with no visible effect. The exceptions
# are the <app><datastore> section, which is next, the "boot" definition in the <akka> section below, and the
# <akka><storage> section near the end of the file, where we specify the storage, add information about database
# names, etc., which is part of the standard Akka configuration.
# Everything else, starting with <log>, is standard. Modify as needed.

<app>
  <datastore>
    # Which database?
    type = "MongoDB"
    # type = "in-memory"
  </datastore>
</app>

<log>
  # In production, you might want /var/log/irc or something similar.
  filename = "./logs/akka.log"
  roll = "daily"  # Options: never, hourly, daily, sunday/monday/...
  level = "info" # Options: fatal, critical, error, warning, info, debug, trace
  console = on
  # syslog_host = ""
  # syslog_server_name = ""
</log>

<akka>
  version = "1.0"

  # FQN to the class doing initial active object/actorsupervisor bootstrap, etc.,
  # which does its work in the default constructor.
  boot = ["irc.boot.Boot"]

  <actor>
    timeout = 5000              # default timeout for future based invocations
    serialize-messages = off    # does a deep clone of (non-primitive) messages to ensure immutability
  </actor>

  <stm>
    service = on
    fair = on                     # should transactions be fair or non-fair (non fair yield better performance)
    max-nr-of-retries = 1000      # max nr of retries of a failing transaction before giving up
    timeout = 10000               # transaction timeout; if transaction has not committed within the timeout then it is aborted
    distributed = off             # not implemented yet
  </stm>

  <rest>
    service = on
    hostname = "localhost"
    port = 9998
    filters = ["akka.security.AkkaSecurityFilterFactory"]              # List with all jersey filters to use
    resource-packages = ["finance"]
    authenticator = "akka.security.samples.BasicAuthenticationService" # The authentication service to use
  </rest>

  <remote>
    compression-scheme = "zlib" # Options: "zlib" (lzf to come), leave out for no compression
    zlib-compression-level = 6  # Options: 0-9 (1 being fastest and 9 being the most compressed), default is 6

    <cluster>
      service = on
      name = "default"                                                        # The name of the cluster
      # actor = "akka.cluster.jgroups.JGroupsClusterActor" # FQN of an implementation of ClusterActor
      serializer = "akka.serialization.Serializer$Java$" # FQN of the serializer class
    </cluster>

    <server>
      service = on
      hostname = "localhost"
      port = 9999
      connection-timeout = 1000 # in millis (1 sec default)
    <server>

    <client>
      reconnect-delay = 5000    # in millis (5 sec default)
      read-timeout = 10000      # in millis (10 sec default)
    <client>
  </remote>

  <storage>
    <cassandra>
      hostname = "127.0.0.1"        # IP address or hostname of one of the Cassandra cluster's seeds
      port = 9160
      consistency-level = "QUORUM"  # Options: ZERO, ONE, QUORUM, ALL
    </cassandra>

    <mongodb>
      service = on
      hostname = "127.0.0.1"        # IP address or hostname of the MongoDB DB instance
      port = 27017
      dbname = "irc_db"
      storage-format = "sjson"            # Options: java, scala-json, java-json, protobuf, sjson
    </mongodb>

    <redis>
      hostname = "127.0.0.1"        # IP address or hostname of the Redis instance
      port = 6379
    </redis>
  </storage>
</akka>
